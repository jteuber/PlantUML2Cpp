@startuml PlantUML2Cpp

' set namespaceSeparator ::


class PlantUML2Cpp {
    bool run(filesystem::path path)
    
}

PlantUML2Cpp *-- "1" PlantUml.Parser
PlantUML2Cpp *-- "1" Cpp.ClassBuilder
PlantUML2Cpp *-- "1" Cpp.HeaderGenerator
PlantUML2Cpp *-- "1" Cpp.Config

namespace PlantUml {

    interface AbstractVisitor {
        +visit(Variable v)     : bool
        +visit(Method m)       : bool
        +visit(Relationship r) : bool
        +visit(Container c)    : bool
        +visit(Element e)      : bool
        +visit(Note n)         : bool
        +visit(Separator s)    : bool
        +visit(Keyword k)      : bool
        +visit(Parameter p)    : bool
        +visit(End e)          : bool
    }

    class Parser {
        +parse(string_view input) : bool
        +showAST(AbstractVisitor visitor) : bool
    }

    class ModelElement << (V,#FF55AA) >>

    class Container {
        +name : list<string>
        +style : string
    }
    enum ContainerType {
        Document
        Package
        Namespace
    }

    class Element {
        +name : list<string>
        +stereotype : string
        +spotLetter : char
        +implements : list<string>
        +extends : list<string>
    }
    enum ElementType {
        Abstract
        Annotation
        Class
        Entity
        Enum
        Interface
    }

    class Variable {
        +name : string
        +type : list<string>
        +element : list<string>
    }
    class Method {
        +name : string
        +returnType : list<string>
        +element : list<string>
    }
    class Parameter {
        +name : string
        +type : list<string>
    }
    class Separator {
        +text : string
    }
    class Enumerator {
        +name : string
    }
    class Relationship {
        +subject : list<string> 
        +object : list<string> 
        +subjectCardinality : string 
        +objectCardinality : string 
        +label : string
        +hidden : bool
    }
    enum RelationshipType {
        Extension
        Composition
        Aggregation
        Usage
    }
    class Note {
        +name : string
        +relatesTo : list<string>
        +text : string
    }
    enum Visibility {
        Private
        Protected
        PackagePrivate
        Public
        Unspecified
    }
    enum Modifier {
        None
        Abstract 
        Static
    }
    class End
    enum EndType
    {
        Document
        Package
        Namespace
        Element
        Method
    }

    class SyntaxNode

    Parser *-- SyntaxNode : generate

    SyntaxNode *-- "0..*" SyntaxNode : children
    SyntaxNode *-- "1" ModelElement : element

    ModelElement *-up- Note
    ModelElement *-up- Separator
    ModelElement *-up- Enumerator
    ModelElement *-up- Parameter
    ModelElement *-- Container
    ModelElement *-- Element
    ModelElement *-- Relationship
    ModelElement *-- Variable
    ModelElement *-- Method
    ModelElement *-- End

    Element *-- "1" ElementType : type
    Container *-- "1" ContainerType  : type
    Variable *-- "1" Visibility
    Variable *-- "1" Modifier
    Method *-- "1" Visibility
    Method *-- "1" Modifier
    End *-- "1" EndType : type
    Relationship *-- "1" RelationshipType : type

    AbstractVisitor -left-> ModelElement : visits

    Parser *-up- "1" peg_parser.SyntaxTree
    Parser *-up- "1" peg_parser.ParserGenerator
}

' TODO: go for Interpreter -> Optimizer -> CodeGenerator

namespace Cpp {

    class ClassBuilder

    class HeaderGenerator {
        +string generate(Class in)
        -string generateMethods(vector<Method> methods, Visibility vis)
        -string generateMembers(vector<Variable> members, Visibility vis, Class::Type classType)
        -string generateIncludes(Class in)
        -string methodToString(Method m)
        -string variableToString(Variable var, Class::Type classType)
        -string variableTypeToString(Variable var)
        -string visibilityToString(Visibility vis)
    }

    class Config {
        +string memberPrefix
        +string indent
        +bool noMemberPrefixForStructs
        +umap<string, string> containerByCardinalityComposition
        +umap<string, string> containerByCardinalityAggregation
        +vector<pair<Visibility, string>> memberOrder
        +umap<string, string> typeToIncludeMap
    }

    class Class {
        +name : string
        +namespaces : list<string>
        +inherits : vector<string>
        +isStruct : bool
        +comment : string
        +includes : vector<string>
    }
    class BodyElement << (V,#FF55AA) >>
    class VisibilityKeyword {
        +name : string
    }
    class Separator {
        +text : string
    }
    class Variable {
        +name : string
        +type : string
        +comment : string
        +isStatic : bool
    }
    class Method {
        +name : string
        +returnType : string
        +comment : string
        +isAbstract : bool
        +isStatic : bool
        +isConst : bool
    }
    class Parameter {
        +name : string
        +type : string
    }

    class Enum {
        +name  : string
        +namespaces : list<string>
        +comment : string
    }
    class Keyword {
        +name : string
    }

    ClassBuilder --|> PlantUml.AbstractVisitor

    Class *-- "0..*" BodyElement
    BodyElement *-- Method
    BodyElement *-- Variable
    BodyElement *-- VisibilityKeyword
    BodyElement *-- Separator
    Method *-- "0..*" Parameter

    Enum *-- Keyword

    ClassBuilder *-- "0..*" Class : generated
    HeaderGenerator --> Class : uses
    HeaderGenerator *- "1" Config
}

@enduml