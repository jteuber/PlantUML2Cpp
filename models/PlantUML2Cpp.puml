@startuml PlantUML2Cpp

' set namespaceSeparator ::


class PlantUML2Cpp {
    bool run(filesystem::path path)
}

class Config {
    +string memberPrefix
    +string indent
    +bool noMemberPrefixForStructs
    +umap<string, string> containerByCardinalityComposition
    +umap<string, string> containerByCardinalityAggregation
    +umap<string, string> typeToIncludeMap
}

PlantUML2Cpp *-- "1" PlantUml.Parser
PlantUML2Cpp *-- "1" Cpp.ClassTranslator
PlantUML2Cpp *-- "1" Cpp.ClassPostProcessor
PlantUML2Cpp *-- "1" Cpp.ClassGenerator
PlantUML2Cpp *-left- "1" Config

namespace PlantUml {

    interface AbstractVisitor {
        +visit(Variable v)     : bool
        +visit(Method m)       : bool
        +visit(Relationship r) : bool
        +visit(Container c)    : bool
        +visit(Element e)      : bool
        +visit(Note n)         : bool
        +visit(Separator s)    : bool
        +visit(Keyword k)      : bool
        +visit(Parameter p)    : bool
        +visit(End e)          : bool
    }

    class Parser {
        +parse(string_view input) : bool
        +showAST(AbstractVisitor visitor) : bool
    }

    class ModelElement << (V,#FF55AA) >>

    class Container {
        +name : list<string>
        +style : string
    }
    enum ContainerType {
        Document
        Package
        Namespace
    }

    class Element {
        +name : list<string>
        +stereotype : string
        +spotLetter : char
        +implements : list<string>
        +extends : list<string>
    }
    enum ElementType {
        Abstract
        Annotation
        Class
        Entity
        Enum
        Interface
    }

    class Variable {
        +name : string
        +type : Type
        +element : list<string>
    }
    class Method {
        +name : string
        +returnType : Type
        +element : list<string>
    }
    class Parameter {
        +name : string
        +type : Type
    }
    class Separator {
        +text : string
    }
    class Enumerator {
        +name : string
    }
    class Type
    {
        +list<string> base;
        +vector<Type> templateParams;
    }
    class Relationship {
        +subject : list<string> 
        +object : list<string> 
        +subjectCardinality : string 
        +objectCardinality : string 
        +label : string
        +hidden : bool
    }
    enum RelationshipType {
        Extension
        Composition
        Aggregation
        Usage
    }
    class Note {
        +name : string
        +relatesTo : list<string>
        +text : string
    }
    enum Visibility {
        Private
        Protected
        PackagePrivate
        Public
        Unspecified
    }
    enum Modifier {
        None
        Abstract 
        Static
    }
    class End
    enum EndType
    {
        Document
        Package
        Namespace
        Element
        Method
    }

    class SyntaxNode

    Parser *-- SyntaxNode : generate

    SyntaxNode *-- "0..*" SyntaxNode : children
    SyntaxNode *-- "1" ModelElement : element

    ModelElement *-up- Note
    ModelElement *-up- Separator
    ModelElement *-up- Enumerator
    ModelElement *-up- Parameter
    ModelElement *-up- Type
    ModelElement *-- Container
    ModelElement *-- Element
    ModelElement *-- Relationship
    ModelElement *-- Variable
    ModelElement *-- Method
    ModelElement *-- End

    Element *-- "1" ElementType : type
    Container *-- "1" ContainerType  : type
    Variable *-- "1" Visibility
    Variable *-- "1" Modifier
    Method *-- "1" Visibility
    Method *-- "1" Modifier
    End *-- "1" EndType : type
    Relationship *-- "1" RelationshipType : type

    AbstractVisitor -left-> ModelElement : visits

    Parser *-up- "1" peg_parser.SyntaxTree
    Parser *-up- "1" peg_parser.ParserGenerator
}

' TODO: go for Translator -> PostProcessor -> CodeGenerator

namespace Cpp {

    class ClassTranslator {
        +visit(Variable v)     : bool
        +visit(Method m)       : bool
        +visit(Relationship r) : bool
        +visit(Container c)    : bool
        +visit(Element e)      : bool
        +visit(Note n)         : bool
        +visit(Separator s)    : bool
        +visit(Keyword k)      : bool
        +visit(Parameter p)    : bool
        +visit(End e)          : bool
    }
    ClassTranslator --|> PlantUml.AbstractVisitor

    class ClassPostProcessor {
        +process(vector<Class>& classes)
    }

    class IncludeGatherer
    class IncludeOptimizer
    class MemberSorter

    ClassPostProcessor *-- IncludeGatherer
    ClassPostProcessor *-- IncludeOptimizer
    ClassPostProcessor *--- MemberSorter
    IncludeOptimizer <- IncludeGatherer

    class ClassGenerator {
        +generate(Class c)
    }

    class HeaderGenerator {
        +string generate(Class in)
        -string generateMethods(vector<Method> methods, Visibility vis)
        -string generateMembers(vector<Variable> members, Visibility vis, Class::Type classType)
        -string generateIncludes(Class in)
        -string methodToString(Method m)
        -string variableToString(Variable var, Class::Type classType)
        -string variableTypeToString(Variable var)
        -string visibilityToString(Visibility vis)
    }

    class SourceGenerator {
        +string generate(Class in)
    }

    ClassGenerator *-- HeaderGenerator
    ClassGenerator *-- SourceGenerator

    class Class {
        +name : string
        +comment : string
        +isStruct : bool
        +namespaces : list<string>
        +inherits : set<string>
        +externalIncludes : vector<string>
        +localIncludes : vector<string>
    }
    class BodyElement << (V,#FF55AA) >>
    class VisibilityKeyword {
        +name : string
    }
    class Separator {
        +text : string
    }
    class Variable {
        +name : string
        +type : string
        +comment : string
        +isStatic : bool
    }
    class Method {
        +name : string
        +returnType : string
        +comment : string
        +isAbstract : bool
        +isConst : bool
        +isStatic : bool
    }
    class Parameter {
        +name : string
        +type : string
    }

    ' class Enum {
    '     +name  : string
    '     +namespaces : list<string>
    '     +comment : string
    ' }
    ' class Keyword {
    '     +name : string
    ' }

    
    ClassPostProcessor <- ClassTranslator
    ClassGenerator <- ClassPostProcessor

    Class *-- "0..*" BodyElement : body
    BodyElement *-- Method
    BodyElement *-- Variable
    BodyElement *-- VisibilityKeyword
    BodyElement *-- Separator
    Method *-- "0..*" Parameter : parameters

    ' Enum *-- Keyword

    ClassTranslator *-- "0..*" Class : generated
}

@enduml