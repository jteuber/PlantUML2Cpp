@startuml Class

namespace Cpp {

    namespace Class {
        ' *************** ALGORITHMS ***************
        class Translator
        {
            +visit(PlantUml.Variable v)     : bool
            +visit(PlantUml.Method m)       : bool
            +visit(PlantUml.Relationship r) : bool
            +visit(PlantUml.Container c)    : bool
            +visit(PlantUml.Element e)      : bool
            +visit(PlantUml.Note n)         : bool
            +visit(PlantUml.Separator s)    : bool
            +visit(PlantUml.Enumerator e)   : bool
            +visit(PlantUml.Parameter p)    : bool
            +visit(PlantUml.End e)          : bool
            +visit(PlantUml.Type t)         : bool

            +results() : vector<Class>
        }
        Translator .|> PlantUml.AbstractVisitor

        class PostProcessor {
            +process(vector<Class> classes)
        }

        class IncludeGatherer {
            +gather(Class& c)
        }
        class IncludeOptimizer {
            +process(vector<Class> classes)
        }
        class MemberSorter {
            +sort(Class& c)
        }

        PostProcessor *-- IncludeGatherer
        PostProcessor *-- IncludeOptimizer
        PostProcessor *--- MemberSorter
        IncludeOptimizer <- IncludeGatherer


        class HeaderGenerator {
            +generate(Class in) : string
        }

        class SourceGenerator {
            +generate(Class in) : string
        }

        Translator -left-> PostProcessor

        class ClassGenerator implements Main.Generator {
            +generate(PlantUml.SyntaxNode root) : vector<File>
        }
        ClassGenerator *-- Translator
        ClassGenerator *-- PostProcessor
        ClassGenerator *-- HeaderGenerator
        ClassGenerator *--- SourceGenerator

        ' *************** DATA ***************
        class Class << (S,#FFAA55) >>
        {
            +name : string
            +comment : string
            +isStruct : bool
            +namespaces : list<string>
            +inherits : set<string>
            +externalIncludes : vector<string>
            +localIncludes : vector<string>
        }
        class ClassElement << (V,#FF55AA) >>
        class VisibilityKeyword << (S,#FFAA55) >>
        {
            +name : string
        }
        class Separator << (S,#FFAA55) >>
        {
            +text : string
        }
        class Variable << (S,#FFAA55) >>
        {
            +name : string
            +comment : string
            +isStatic : bool
        }
        class Method << (S,#FFAA55) >>
        {
            +name : string
            +comment : string
            +isAbstract : bool
            +isConst : bool
            +isStatic : bool
        }
        class Parameter << (S,#FFAA55) >>
        {
            +name : string
        }


        Method *--- "1" Cpp.Type : returnType
        Parameter *-- "1" Cpp.Type : type
        Variable *--- "1" Cpp.Type : type


        Class *-- "0..*" ClassElement : body
        ClassElement *-- Method
        ClassElement *-- Variable
        ClassElement *-- VisibilityKeyword
        ClassElement *-- Separator
        Method *-- "0..*" Parameter : parameters
    }
}

@enduml